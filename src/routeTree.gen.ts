/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IdeasRouteRouteImport } from './routes/ideas/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as IdeasIndexRouteImport } from './routes/ideas/index'
import { Route as IdeasNewIndexRouteImport } from './routes/ideas/new/index'
import { Route as IdeasIdeasIdIndexRouteImport } from './routes/ideas/$ideasId/index'
import { Route as authRegisterIndexRouteImport } from './routes/(auth)/register/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'
import { Route as IdeasIdeasIdEditRouteImport } from './routes/ideas/$ideasId/edit'

const IdeasRouteRoute = IdeasRouteRouteImport.update({
  id: '/ideas',
  path: '/ideas',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const IdeasIndexRoute = IdeasIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => IdeasRouteRoute,
} as any)
const IdeasNewIndexRoute = IdeasNewIndexRouteImport.update({
  id: '/new/',
  path: '/new/',
  getParentRoute: () => IdeasRouteRoute,
} as any)
const IdeasIdeasIdIndexRoute = IdeasIdeasIdIndexRouteImport.update({
  id: '/$ideasId/',
  path: '/$ideasId/',
  getParentRoute: () => IdeasRouteRoute,
} as any)
const authRegisterIndexRoute = authRegisterIndexRouteImport.update({
  id: '/register/',
  path: '/register/',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => authRouteRoute,
} as any)
const IdeasIdeasIdEditRoute = IdeasIdeasIdEditRouteImport.update({
  id: '/$ideasId/edit',
  path: '/$ideasId/edit',
  getParentRoute: () => IdeasRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ideas': typeof IdeasRouteRouteWithChildren
  '/ideas/': typeof IdeasIndexRoute
  '/ideas/$ideasId/edit': typeof IdeasIdeasIdEditRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/ideas/$ideasId': typeof IdeasIdeasIdIndexRoute
  '/ideas/new': typeof IdeasNewIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ideas': typeof IdeasIndexRoute
  '/ideas/$ideasId/edit': typeof IdeasIdeasIdEditRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
  '/ideas/$ideasId': typeof IdeasIdeasIdIndexRoute
  '/ideas/new': typeof IdeasNewIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/ideas': typeof IdeasRouteRouteWithChildren
  '/ideas/': typeof IdeasIndexRoute
  '/ideas/$ideasId/edit': typeof IdeasIdeasIdEditRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/register/': typeof authRegisterIndexRoute
  '/ideas/$ideasId/': typeof IdeasIdeasIdIndexRoute
  '/ideas/new/': typeof IdeasNewIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ideas'
    | '/ideas/'
    | '/ideas/$ideasId/edit'
    | '/login'
    | '/register'
    | '/ideas/$ideasId'
    | '/ideas/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/ideas'
    | '/ideas/$ideasId/edit'
    | '/login'
    | '/register'
    | '/ideas/$ideasId'
    | '/ideas/new'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/ideas'
    | '/ideas/'
    | '/ideas/$ideasId/edit'
    | '/(auth)/login/'
    | '/(auth)/register/'
    | '/ideas/$ideasId/'
    | '/ideas/new/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  IdeasRouteRoute: typeof IdeasRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ideas': {
      id: '/ideas'
      path: '/ideas'
      fullPath: '/ideas'
      preLoaderRoute: typeof IdeasRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ideas/': {
      id: '/ideas/'
      path: '/'
      fullPath: '/ideas/'
      preLoaderRoute: typeof IdeasIndexRouteImport
      parentRoute: typeof IdeasRouteRoute
    }
    '/ideas/new/': {
      id: '/ideas/new/'
      path: '/new'
      fullPath: '/ideas/new'
      preLoaderRoute: typeof IdeasNewIndexRouteImport
      parentRoute: typeof IdeasRouteRoute
    }
    '/ideas/$ideasId/': {
      id: '/ideas/$ideasId/'
      path: '/$ideasId'
      fullPath: '/ideas/$ideasId'
      preLoaderRoute: typeof IdeasIdeasIdIndexRouteImport
      parentRoute: typeof IdeasRouteRoute
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/ideas/$ideasId/edit': {
      id: '/ideas/$ideasId/edit'
      path: '/$ideasId/edit'
      fullPath: '/ideas/$ideasId/edit'
      preLoaderRoute: typeof IdeasIdeasIdEditRouteImport
      parentRoute: typeof IdeasRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authLoginIndexRoute: typeof authLoginIndexRoute
  authRegisterIndexRoute: typeof authRegisterIndexRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginIndexRoute: authLoginIndexRoute,
  authRegisterIndexRoute: authRegisterIndexRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface IdeasRouteRouteChildren {
  IdeasIndexRoute: typeof IdeasIndexRoute
  IdeasIdeasIdEditRoute: typeof IdeasIdeasIdEditRoute
  IdeasIdeasIdIndexRoute: typeof IdeasIdeasIdIndexRoute
  IdeasNewIndexRoute: typeof IdeasNewIndexRoute
}

const IdeasRouteRouteChildren: IdeasRouteRouteChildren = {
  IdeasIndexRoute: IdeasIndexRoute,
  IdeasIdeasIdEditRoute: IdeasIdeasIdEditRoute,
  IdeasIdeasIdIndexRoute: IdeasIdeasIdIndexRoute,
  IdeasNewIndexRoute: IdeasNewIndexRoute,
}

const IdeasRouteRouteWithChildren = IdeasRouteRoute._addFileChildren(
  IdeasRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  IdeasRouteRoute: IdeasRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
